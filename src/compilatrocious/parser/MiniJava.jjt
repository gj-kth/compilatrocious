options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  MULTI = true;
  VISITOR = true;
}
PARSER_BEGIN(MiniJava)

package compilatrocious.parser;

public class MiniJava{}

PARSER_END(MiniJava)

/* WHITESPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* COMMENTS */
SKIP :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

<IN_SL_COMMENT> SKIP :
{
  < "\n" | "\r" | "\r\n" > : DEFAULT
}
<IN_SL_COMMENT> MORE :
{
  <~[]>
}

<IN_ML_COMMENT> SKIP :
{
  < "*/" > : DEFAULT
}
<IN_ML_COMMENT> MORE :
{
  <~[]>
}

/* SEPARATORS */
TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACK: "[">
| <RBRACK: "]">
| <SEMI: ";">
| <COMMA: ",">
| <DOT: ".">
}

/* RESERVED WORDS */
TOKEN :
{
  <BOOL: "boolean">
| <CLASS: "class">
| <ELSE: "else">
| <FOR: "for">
| <IF: "if">
| <INT: "int">
| <NEW: "new">
| <PUBLIC: "public">
| <RETURN: "return">
| <STATIC: "static">
| <THIS: "this">
| <VOID: "void">
| <WHILE: "while">
| <STRING: "String">
| <LENGTH: "length">
| <NOT: "!">
}

/* OPERATORS */
TOKEN :
{
  <ASSIGN: "=">
| <LOG_AND: "&&">
| <LT: "<">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
}

/* IDENTIFIERS */
TOKEN :
{
 <ID: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "-" | "_")*>
}

/* LITERALS */
TOKEN :
{
  <INT_LITERAL: ("0" | ["1"-"9"](["0"-"9"])*)>
| <BOOL_LITERAL: ("true" | "false" )>
}

SimpleNode Program() :
{}
{
  MainClass()
  ( ClassDecl() )*
  {return jjtThis;}
}

/* Class Productions */
void MainClass() :
{}
{
  "class" Identifier() <LBRACE>
    MainMethod()
  <RBRACE>
}

void ClassBody() :
{}
{
  ( VarDecl() )*
  ( MethodDecl() )*
}

void ClassDecl() :
{}
{
  "class" Identifier() <LBRACE>
    ClassBody()
  <RBRACE>
}

/* Method Productions */
void MethodBody() :
{}
{
  ( LOOKAHEAD(2) VarDecl() )*
  ( Stmt() )*
}

void Return() :
{}
{
  <RETURN> Expr() <SEMI>
}

void MainMethod() :
{Token name;}
{
    <PUBLIC> <STATIC> <VOID> name=<ID> <LPAREN> "String" <LBRACK> <RBRACK> <ID> <RPAREN> <LBRACE>
      {
        String str = new String(name.image);
        if(!str.equals("main")){
            throw new ParseException("Expected main, found " + str);
        }
        jjtThis.value=name;
      }
      MethodBody()
    <RBRACE>
}

void MethodDecl() :
{}
{
  "public" Type() Identifier() <LPAREN> ( ArgList() )? <RPAREN> <LBRACE>
    MethodBody()
    Return()
  <RBRACE>
}

void ArgList() :
{}
{
  (Arg())+
}

void Arg() :
{}
{
  Type() Identifier()
| <COMMA> Type() Identifier()
}

void VarDecl() :
{}
{
  Type() Identifier() <SEMI>
}

/* Basic Productions */
void Identifier() :
{Token id;}
{
  id=<ID> {jjtThis.value=id;}
}

void Int() :
{}
{
  <INT>
}

void IntLiteral() :
{Token i;}
{
  i=<INT_LITERAL> {jjtThis.value=i;}
}

void IntArray() :
{}
{
  <INT> <LBRACK> <RBRACK>
}

void Boolean() :
{}
{
  <BOOL>
}
void BoolLiteral() :
{Token b;}
{
  b=<BOOL_LITERAL> {jjtThis.value=b;}
}

void Type() :
{}
{
  Boolean()
| LOOKAHEAD(2) IntArray()
| Int()
| Identifier()
}

/* Statement Productions */
void Stmt() :
{}
{
  Block()
| Conditional()
| Print()
| While()
| Assignment()
}

void Block() :
{}
{
  <LBRACE>
    ( Stmt() )*
  <RBRACE>
}

void Assignment() :
{}
{Identifier() (<LBRACK> Expr() <RBRACK>)? <ASSIGN> Expr() <SEMI>}

void Conditional() :
{}
{
  LOOKAHEAD(3)
  <IF> <LPAREN> Expr() <RPAREN> Stmt() <ELSE> Stmt()
| <IF> <LPAREN> Expr() <RPAREN> Stmt()
}

void Print() :
{}
{"System.out.println" <LPAREN> Expr() <RPAREN> <SEMI>}

void While() :
{}
{<WHILE> <LPAREN> Expr() <RPAREN> Stmt()}

/* Expression Productions */
void Expr() :
{}
{
  (<NOT>)* ExprPrefix() (ExprSuffix())?
}

void ExprPrefix() #void :
{}
{
  BoolLiteral()
| IntLiteral()
| Identifier()
| <NEW> (<INT> <LBRACK> Expr() <RBRACK> |<ID> <LPAREN> <RPAREN>)
| <THIS>
| <LPAREN> Expr() <RPAREN>
}

void ExprSuffix() #void :
{}
{
  <LBRACK> Expr() <RBRACK> (ExprSuffix())?
| <DOT> ( ("main" | <ID>) <LPAREN> (ExprList())? <RPAREN> | <LENGTH>) (ExprSuffix())?
| Op() Expr()
}

void ExprList() :
{}
{
  Expr() (ExprListTail())*
}

void ExprListTail() #void :
{}
{
  <COMMA> Expr()
}

void Op() #void :
{}
{
  "&&" #And
| "<"  #LessThan
| "+"  #Plus
| "-"  #Minus
| "*"  #Mult
}
