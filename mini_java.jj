options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}
PARSER_BEGIN(MiniJava)

public class MiniJava{

    public static void main(String args[]) throws ParseException {
        MiniJava parser = new MiniJava(System.in);
        parser.Program();
        System.out.println("Success");
    }
}

PARSER_END(MiniJava)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* SEPARATORS */
TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACK: "[">
| <RBRACK: "]">
| <SEMI: ";">
| <COMMA: ",">
| <DOT: ".">
}

/* RESERVED WORDS */
TOKEN :
{
  <BOOL: "boolean">
| <CLASS: "class">
| <ELSE: "else">
| <FOR: "for">
| <FALSE: "false">
| <IF: "if">
| <INT: "int">
| <NEW: "new">
| <PUBLIC: "public">
| <RETURN: "return">
| <STATIC: "static">
| <THIS: "this">
| <TRUE: "true">
| <VOID: "void">
| <WHILE: "while">
| <MAIN: "main">
| <STRING: "String">
}

/* OPERATORS */
TOKEN :
{
  <ASSIGN: "=">
| <LOG_AND: "&&">
| <LT: "<">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
}

/* IDENTIFIERS */
TOKEN :
{
  <ID: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "-" | "_")*>
}

/* LITERALS */
TOKEN :
{
  <INT_LITERAL: ("0" | ["1"-"9"](["0"-"9"])*)>
}

void Program() :
{}
{
  MainClass()
  ( ClassDecl() )*
}

void MainClass() :
{}
{
  "class" <ID> <LBRACE>
    <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> "String" <LBRACK> <RBRACK> <ID> <RPAREN> <LBRACE>
      ( VarDecl() )*
      ( Stmt() )*
    <RBRACE>
  <RBRACE>
}

void ClassDecl() :
{}
{
  "class" <ID>  <LBRACE>
    ( VarDecl() )*
    ( MethodDecl() )*
  <RBRACE>
}

void MethodDecl() :
{}
{
  "public" Type() <ID> <LPAREN> ( ArgList() )? <RPAREN> <LBRACE>
    ( VarDecl() )*
    ( Stmt() )*
    "return" Expr() <SEMI>
  <RBRACE>
}

void ArgList() :
{}
{
  Type() <ID> (ArgListTail())*
}

void ArgListTail() :
{}
{
  <COMMA> Type() <ID>
}

void VarDecl() :
{}
{
  Type() <ID> <SEMI>
}

void Stmt() :
{}
{
  <LBRACE>
    ( Stmt() )*
  <RBRACE>
| <IF> <LPAREN> Expr() <RPAREN> Stmt() <ELSE> Stmt()
| <ID> <ASSIGN> Expr() <SEMI>
}

void Expr() :
{}
{
<INT_LITERAL>
}

void Op() :
{}
{
  "==" | "&&" | "<" | "+" | "-" | "*"
}

void Type() :
{}
{
  "boolean"
| "int"
}


