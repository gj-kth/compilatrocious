options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  MULTI = true;
  VISITOR = true;
}
PARSER_BEGIN(MiniJava)

package mjc.parser;

public class MiniJava{}

PARSER_END(MiniJava)

/* WHITESPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* COMMENTS */
SKIP :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

<IN_SL_COMMENT> SKIP :
{
  < "\n" | "\r" | "\r\n" > : DEFAULT
}
<IN_SL_COMMENT> MORE :
{
  <~[]>
}

<IN_ML_COMMENT> SKIP :
{
  < "*/" > : DEFAULT
}
<IN_ML_COMMENT> MORE :
{
  <~[]>
}

/* SEPARATORS */
TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACK: "[">
| <RBRACK: "]">
| <SEMI: ";">
| <COMMA: ",">
| <DOT: ".">
}

/* RESERVED WORDS */
TOKEN :
{
  <BOOL: "boolean">
| <CLASS: "class">
| <ELSE: "else">
| <FOR: "for">
| <IF: "if">
| <INT: "int">
| <NEW: "new">
| <PUBLIC: "public">
| <RETURN: "return">
| <STATIC: "static">
| <THIS: "this">
| <VOID: "void">
| <WHILE: "while">
| <STRING: "String">
| <LENGTH: "length">
| <NOT: "!">
}

/* OPERATORS */
TOKEN :
{
  <ASSIGN: "=">
| <AND: "&&">
| <OR: "||">
| <LT: "<">
| <LE: "<=">
| <GT: ">">
| <GE: ">=">
| <EQ: "==">
| <NE: "!=">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
}

/* LITERALS */
TOKEN :
{
  <INT_LITERAL: ("0" | ["1"-"9"](["0"-"9"])*)>
| <BOOL_LITERAL: ("true" | "false" )>
}

/* IDENTIFIERS */
TOKEN :
{
 <ID: (["a"-"z"] | ["A"-"Z"] | "_") (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>
}

SimpleNode Program() :
{}
{
  MainClass()
  ( ClassDecl() )* #ClassDecls(true)
  {return jjtThis;}
}

/* Class Productions */
void MainClass() :
{}
{
  "class" Identifier() <LBRACE>
    MainMethod()
  <RBRACE>
}

void ClassBody() #void:
{}
{
  ( VarDecl() )* #VarDecls(true)
  ( MethodDecl() )* #MethodDecls(true)
}

void ClassDecl() :
{}
{
  "class" Identifier() <LBRACE>
    ClassBody()
  <RBRACE>
}

/* Method Productions */
void MethodBody() :
{}
{
  ( LOOKAHEAD(2) VarDecl() )* #VarDecls(true)
  ( Stmt() )* #Stmts(true)
}

void Return() #void:
{}
{
  <RETURN> Expr() <SEMI>
}

void MainMethod() :
{Token name;}
{
    <PUBLIC> <STATIC> <VOID> name=<ID> <LPAREN> "String" <LBRACK> <RBRACK> Identifier() <RPAREN> <LBRACE>
      {
        String str = new String(name.image);
        if(!str.equals("main")){
            throw new ParseException("Expected main, found " + str);
        }
        jjtThis.value=name;
      }
      MethodBody()
    <RBRACE>
}

void MethodDecl() :
{}
{
  "public" Type() Identifier() <LPAREN> ArgList() <RPAREN> <LBRACE>
    MethodBody()
    Return()
  <RBRACE>
}

void ArgList() :
{}
{
  (Arg())*
}

void Arg() :
{}
{
  Type() Identifier()
| <COMMA> Type() Identifier()
}

void VarDecl() :
{}
{
  Type() Identifier() <SEMI>
}

/* Basic Productions */
void Identifier() :
{Token id;}
{
  id=<ID> {jjtThis.value=id;}
}

void Int() :
{}
{
  <INT>
}

void IntLiteral() :
{Token i;}
{
  i=<INT_LITERAL> {jjtThis.value=i;}
}

void IntArray() :
{}
{
  <INT> <LBRACK> <RBRACK>
}

void Boolean() :
{}
{
  <BOOL>
}

void BoolLiteral() :
{Token b;}
{
  b=<BOOL_LITERAL> {jjtThis.value=b;}
}

void Type() :
{}
{
  Boolean()
| LOOKAHEAD(2) IntArray()
| Int()
| Identifier()
}

/* Statement Productions */
void Stmt() :
{}
{
  Block()
| Conditional()
| Print()
| While()
| Assignment()
}

void Block() :
{}
{
  <LBRACE>
    ( Stmt() )* #Stmts(true)
  <RBRACE>
}

void Assignment() #void:
{}
{
  LOOKAHEAD(2)
  SingleAssignment()
| ArrayAssignment()
}

void SingleAssignment() :
{}
{Identifier() <ASSIGN> Expr() <SEMI>}

void ArrayAssignment() :
{}
{
  Identifier() <LBRACK> Expr() <RBRACK> <ASSIGN> Expr() <SEMI>
}

void Conditional() #void:
{}
{
  IfPart() (LOOKAHEAD(2) <ELSE> 
            {
              Node ifNode = jjtree.popNode();
              jjtree.pushNode(ifNode.jjtGetChild(0));
              jjtree.pushNode(ifNode.jjtGetChild(1));
            } 
            Stmt()  #IfElse(3) )?
}

void IfPart() #void :
{}
{
  <IF> <LPAREN> Expr() <RPAREN> Stmt() #If(2)
}

void Print() :
{}
{"System.out.println" <LPAREN> Expr() <RPAREN> <SEMI>}

void While() :
{}
{<WHILE> <LPAREN> Expr() <RPAREN> Stmt()}

/* Expression Productions */
void Expr() :
{}
{
  OrOp()
//| ExprPrefix() (ExprSuffix())?
}

void OrOp() #void :
{}
{
  AndOp() (<OR> AndOp() #Or(2))*
}

void AndOp() #void :
{}
{
  Comparison() (<AND> Comparison() #And(2))*
}

void Comparison() #void :
{}
{
  Sum() (
    <LT> Sum() #LessThan(2)
|   <LE> Sum() #LessEqual(2)
|   <GT> Sum() #GreaterThan(2)
|   <GE> Sum() #GreaterEqual(2)
|   <EQ> Sum() #Equal(2)
|   <NE> Sum() #NotEqual(2)
    )?
}

void Sum() #void :
{}
{
  Product() (<PLUS> Product() #Plus(2) | <MINUS> Product() #Minus(2))*
}

void Product() #void :
{}
{
  NegExpr() (<STAR> NegExpr() #Mult(2))*
}

void NegExpr() #void:
{}
{
  <NOT> NegExpr() #NegExpr
| ExprGet()
}

void ExprGet() #void :
{}
{
  ExprPart()  (<LBRACK> Expr() <RBRACK> #ArrayAccess(2)
             | LOOKAHEAD(2)
               <DOT> Identifier() <LPAREN> ExprList() <RPAREN> #Call(3)
             | <DOT> <LENGTH> #ArrayLength(1))*
}

void ExprPart() #void :
{}
{
  BoolLiteral()
| IntLiteral()
| Identifier()
| New()
| <THIS> #This
| (<LPAREN> Expr() <RPAREN>) #ParenExp()
}

void New() #void :
{}
{
  LOOKAHEAD(2)
  <NEW> (<INT> <LBRACK> Expr() <RBRACK>) #NewIntArray
| <NEW> (Identifier() <LPAREN> <RPAREN>) #NewObject
}

void ExprList() :
{}
{
  (Expr() (ExprListTail())*)?
}

void ExprListTail() #void :
{}
{
  <COMMA> Expr()
}
