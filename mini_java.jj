options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}
PARSER_BEGIN(MiniJava)

public class MiniJava{

    public static void main(String args[]) throws ParseException {
        MiniJava parser = new MiniJava(System.in);
        parser.Program();
    }
}

PARSER_END(MiniJava)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACK: "[">
| <RBRACK: "]">
| <SEMI: ";">
| <WHILE: "while">
| <FOR: "for">
| <IF: "if">
| <ELSE: "else">
| <CLASS: "class">
| <PUBLIC: "public">
| <STATIC: "static">
| <MAIN: "main">
| <VOID: "void">
| <ID: ["a"-"z"](["a"-"z"] | ["0"-"9"] | "-" | "_")*>
| <STRING: "String">
}

void Program() :
{}
{
  MainClass()
}

void MainClass() :
{}
{
  <CLASS> <ID> <LBRACE>
    <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACK> <RBRACK> <ID> <RPAREN> <LBRACE>
      
    <RBRACE>
  <RBRACE>
}
