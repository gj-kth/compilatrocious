options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  MULTI = true;
}
PARSER_BEGIN(MiniJava)

package compilatrocious.parser;

public class MiniJava{

/*
    public static void main(String args[]) throws ParseException {
        MiniJava parser = new MiniJava(System.in);
        parser.Program();
        System.out.println("Success");
    }
*/
}

PARSER_END(MiniJava)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* SEPARATORS */
TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRACK: "[">
| <RBRACK: "]">
| <SEMI: ";">
| <COMMA: ",">
| <DOT: ".">
}

/* RESERVED WORDS */
TOKEN :
{
  <BOOL: "boolean">
| <CLASS: "class">
| <ELSE: "else">
| <FOR: "for">
| <FALSE: "false">
| <IF: "if">
| <INT: "int">
| <NEW: "new">
| <PUBLIC: "public">
| <RETURN: "return">
| <STATIC: "static">
| <THIS: "this">
| <TRUE: "true">
| <VOID: "void">
| <WHILE: "while">
| <STRING: "String">
| <LENGTH: "length">
| <NOT: "!">
}

/* OPERATORS */
TOKEN :
{
  <ASSIGN: "=">
| <LOG_AND: "&&">
| <LT: "<">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
}

/* IDENTIFIERS */
TOKEN :
{
 <ID: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "-" | "_")*>
}

/* LITERALS */
TOKEN :
{
  <INT_LITERAL: ("0" | ["1"-"9"](["0"-"9"])*)>
}

SimpleNode Program() :
{}
{
  MainClass()
  ( ClassDecl() )*
  {return jjtThis;}
}

void MainClass() :
{Token class_name, method_name;}
{
  "class" class_name=<ID> <LBRACE>
    <PUBLIC> <STATIC> <VOID> method_name=<ID> <LPAREN> "String" <LBRACK> <RBRACK> <ID> <RPAREN> <LBRACE>
    {
        String str = new String(method_name.image);
        if(!str.equals("main")){
            throw new ParseException();
        }

        jjtThis.value=new String(class_name.image);
    }
      ( LOOKAHEAD(2) VarDecl() )*
      ( Stmt() )*
    <RBRACE>
  <RBRACE>
}

void ClassDecl() :
{Token i;}
{
  "class" i=<ID> <LBRACE> {jjtThis.value=new String(i.image);}
    ( VarDecl() )*
    ( MethodDecl() )*
  <RBRACE>
}

void MethodDecl() :
{Token i;}
{
  "public" Type() i=<ID> <LPAREN> ( ArgList() )? <RPAREN> <LBRACE> {jjtThis.value=new String(i.image);}
    ( LOOKAHEAD(2) VarDecl() )*
    ( Stmt() )*
  "return" Expr() <SEMI>
  <RBRACE>
}

void ArgList() :
{}
{
  Type() <ID> (ArgListTail())*
}

void ArgListTail() :
{}
{
  <COMMA> Type() <ID>
}

void VarDecl() :
{}
{
  Type() Identifier() <SEMI>
}

void Identifier() :
{Token id;}
{
  id=<ID> {jjtThis.value=new String(id.image);}
}

void Int() :
{}
{
  <INT>
}

void IntArray() :
{}
{
  <INT> <LBRACK> <RBRACK>
}

void Boolean() :
{}
{
  <BOOL>
}

void Stmt() :
{}
{
  <LBRACE>
    ( Stmt() )*
  <RBRACE>
| <IF> <LPAREN> Expr() <RPAREN> Stmt() <ELSE> Stmt()
| "System.out.println" <LPAREN> Expr() <RPAREN> <SEMI>
| <WHILE> <LPAREN> Expr() <RPAREN> Stmt()
| <ID> (<LBRACK> Expr() <RBRACK>)? <ASSIGN> Expr() <SEMI>
}

void Expr() :
{}
{
  (<NOT>)* ExprPrefix() (ExprSuffix())?
}

void ExprPrefix() :
{Token i;}
{
  <FALSE> 
| <TRUE>
| i=<INT_LITERAL> {jjtThis.value=new Integer(i.image);}
| i=<ID>          {jjtThis.value=new String(i.image);}
| <NEW> (<INT> <LBRACK> Expr() <RBRACK> |<ID> <LPAREN> <RPAREN>)
| <THIS>
| <LPAREN> Expr() <RPAREN>
}

void ExprSuffix() :
{}
{
  <LBRACK> Expr() <RBRACK> (ExprSuffix())?
| <DOT> ( ("main" | <ID>) <LPAREN> (ExprList())? <RPAREN> | <LENGTH>) (ExprSuffix())?
| Op() Expr()
}

void ExprList() :
{}
{
  Expr() (ExprListTail())*
}

void ExprListTail() :
{}
{
  <COMMA> Expr()
}

void Op() :
{}
{
  "&&" | "<" | "+" | "-" | "*"
}

void Type() :
{}
{
  Boolean()
| IntArray()
| Int()
| Identifier()
}
